import React, { useEffect, useState } from "react";
import Back from "../../components/Buttons/Back/Back";
import Share from "../../components/Buttons/Share/Share";
import moment from "moment"; // Import Moment.js
import momentTz from "moment-timezone"; // Import Moment-Timezone for timezone support
import Card from "../../components/card/Card";
import "./style.scss";
import Button from "@mui/material/Button";
import Select from "react-select";
import TimezoneSelector from "./TimezoneSelector";
import CountrySelect from "./CountrySelect";
import { useSelector } from "react-redux";
import axios from "axios";

const time = [
  { value: 12, label: "12h (am/pm)" },
  { value: 24, label: "24h" },
];
const dateformat = [
  { value: "DD/MM/YYYY", label: "DD/MM/YYYY" },
  { value: "DD/MM/YYYY", label: "MM/DD/YYYY" },
];

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;

const API_URL = `${BACKEND_URL}/api/users/`;

const initialState = {
  eventName: "",
  meetingDescription: "",
  meetingId: "",
  value: "SetRecurring",
  selectedUserId: null,
  start: null,
  end: null,
  reminder: null,
  duration: null, // Add duration state variable
};
const EventSettings = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [completeMeeting, setCompleteMeeting] = useState(initialState);
  const [holidays, setHolidays] = useState([]);
  const { user, isLoading, isLoggedIn, isSuccess } = useSelector(
    (state) => state.auth
  );

 

  const handleSubmit = (e) => {
    e.preventDefault();
    setIsSubmitting(true);

    console.log("Form data entered:", completeMeeting);

    setIsSubmitting(false); // End form submission process
  };

  const fetchMeetingId = async (holiday) => {
    if (user) {
      const response = await axios.post(`${API_URL}meeting`, {
        senderId: user._id,
        receiverId: null,
      });

      return response.data._id;
    }
  };

  const handleSelectCountry = async (selectedHolidays) => {
    setHolidays(selectedHolidays);
  
    const initialStatesForHolidays = await Promise.all(
      selectedHolidays.map(async (holiday) => {
        const eventDate = moment(holiday.date.datetime);
  
        // Check if the eventDate contains hour, minute, and second information
        const hasTimeInfo =
          eventDate.hour() !== 0 ||
          eventDate.minute() !== 0 ||
          eventDate.second() !== 0;
  
        if (!hasTimeInfo) {
          // If there is no time info, set start to the beginning of the day (00:00:00) and end to end of the day (23:59:59)
          eventDate.startOf("day");
        }
  
        // Fetch meeting ID for the holiday
        const meetingId = await fetchMeetingId(holiday);
  
        const start = eventDate.toDate(); // Convert back to JavaScript Date object
        const end = eventDate.endOf("day").toDate();
  
        // Calculate duration in minutes
        const duration = moment.duration(moment(end).diff(start)).asMinutes();
  
        return {
          eventName: holiday.name,
          meetingDescription: holiday.description,
          meetingId: meetingId, // Add the fetched meeting ID
          value: holiday.primary_type,
          selectedUserId: user._id,
          start: start,
          end: end,
          reminder: 1440,
          duration: duration,
        };
      })
    );
  
    setCompleteMeeting((prevState) => ({
      ...prevState,
      initialStatesForHolidays: initialStatesForHolidays,
    }));
    console.log(initialStatesForHolidays);
  };
  


  

  return (
    <div className="containersetting">
      <div className="tophead">
        <Back className="--btn:hover" />
        <div className="title-container">
          <h3> Event Settings</h3>
        </div>
        <Share />
      </div>

      <div className="container">
        <div className="form-section">
          <form>
            <div className="section-header">
              <div>
                <h5>What Event is this?</h5>
                <span>What Location</span>
              </div>
              <div className="--flex-end">
                <div className="buttinnext">
                  <button>Cancel</button>
                </div>
                <div className="buttin">
                  <button
                    type="submit"
                    className="--btn --btn-primary --btn-block"
                    onClick={handleSubmit}
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? "Submitting..." : "Save"}
                  </button>
                </div>
              </div>
            </div>
            <div className="margin-from-top flex-container">
              <div className="flow-left">
                <div className="form-group">
                  <label>Date Format</label>
                  <Select
                    type="text"
                    className="completesche2"
                    name="eventName"
                    options={time}
                    placeholder="Time Format"
                  />
                </div>
              </div>
              <div className="flow-left">
                <div className="form-group">
                  <label>Time Format</label>
                  <Select
                    type="text"
                    className="completesche2"
                    name="eventName"
                    options={dateformat}
                    placeholder="Date Format"
                  />
                </div>
              </div>
            </div>
            <div className="flex-container2">
              <div className="flow-left">
                <div className="form-group">
                  <TimezoneSelector
                    type="text"
                    className="completesche3"
                    name="eventName"
                    options={dateformat}
                    placeholder="Date Format"
                  />
                </div>
              </div>
            </div>
            <div className="flex-container2">
              <div className="flow-left">
                <div className="form-group">
                  <label>Select Country</label>
                  <CountrySelect
                    type="text"
                    className="completesche2"
                    name="eventName"
                    onCountryChange={handleSelectCountry}
                    placeholder="Date Format"
                  />
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default EventSettings;
